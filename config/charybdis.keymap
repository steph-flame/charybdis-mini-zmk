#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/ext_power.h>
#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>

#define QUICK_TAP_MS 175
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/42.h"

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 19 20 21 22  // Left-hand keys.
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 16 15 14 13  // Right-hand keys.
#define THUMBS 36 37 38 39 40  // Thumb keys.

#define BASE 0
#define NAV  1
#define DIG  2
#define SYS  3
#define MOUSE  4
#define SCROLL 5
#define SNIPE 6

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.9s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&mt {  // mod-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/ {

    behaviors {
        hm_right: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 19 20 21 22 36 37 38 39 40>;
        };

        hm_left: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 16 15 14 13 36 37 38 39 40>;
        };

        hm_right_layer: homerow_mod_right_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 19 20 21 22 36 37 38 39 40>;
        };

        hm_left_layer: homerow_mod_left_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 16 15 14 13 36 37 38 39 40>;
        };

        comment_or: comment_or {
            compatible = "zmk,behavior-hold-tap";
            label = "slash_or_comm";
            bindings = <&comment>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        all_quotes: all_quotes {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt GRAVE SQT>, <&kp DOUBLE_QUOTES>;
        };

        backspace_or_delete: backspace_or_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Tap: repeat after alpha, else sticky-shift |
        // Double-tap (shift + tap): caps-word |
        // Hold: shift
        shift_repeat: shift_repeat {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>;
            repeat {
                trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
                bindings = <&key_repeat>;
                max-prior-idle-ms = <350>;
                strict-modifiers;
            };
        };
        magic_shift_tap: magic_shift_tap { 
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&shift_repeat>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        magic_shift: magic_shift {
            compatible = "zmk,behavior-hold-tap"
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&magic_shift_tap>;
            tapping_term_ms = <200>;
            flavor = "balanced";
        };
    };

    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
            timeout-ms = <50>;
            require-prior-idle-ms = <50>;
        };

        opt_backspace {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <7 8 9>;
            timeout-ms = <70>;
            require-prior-idle-ms = <100>;
        };

        shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <15 16>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        caps_lock {
            bindings = <&caps_word>;
            key-positions = <14 15 16>;
            timeout-ms = <100>;
            require-prior-idle-ms = <150>;
        };
    };

    macros {
        /**
       * Temporarily switches to a layer (`&mo`) while a modifier is held.
       * Analogous to QMK's `LM()`, using a parameterized macro.
       *
       * Params:
       *  1. Layer to switch to
       *  2. Modifier to press while layer is active
       *
       * Example:
       *  `&lm NUM_LAYER LSHIFT`
       */

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        press_two_keys: press_two_keys {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>;
        };

        super: super {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_press>,
                <&kp LALT>,
                <&macro_press>,
                <&kp LCTL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_release>,
                <&kp LALT>,
                <&macro_release>,
                <&kp LCTL>;
        };

        more_or_equal: more_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "MORE_OR_EQUAL";
        };

        less_or_equal: less_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "LESS_OR_EQUAL";
        };

        fun_arrow_right: fun_arrow_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "FUN_ARROW_RIGHT";
        };

        comment: comment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp STAR>;
            label = "MACROS_COMMENT";
        };
    };

    /omit-if-no-ref/ zip_temp_layer: zip_temp_layer {
        compatible = "zmk,input-processor-temp-layer";
        #input-processor-cells = <2>;
        require-prior-idle-ms = <1000>;
    };

    /omit-if-no-ref/ vertical_scroll_mapper: vertical_scroll_mapper {
        compatible = "zmk,input-processor-code-mapper";
        #input-processor-cells = <0>;
        type = <INPUT_EV_REL>;
        map
            = <INPUT_REL_Y INPUT_REL_WHEEL>
            ;
    };



    trackball_listener {
        compatible = "zmk,input-listener";
        device = <&vtrackball>;
        // scaler: first is multiplier, second one is divider.
        // temp layer: first argument is layer, second is time in ms
        input-processors = <&zip_xy_scaler 1 6>, <&zip_temp_layer MOUSE 1000>;

        snipe {
            layers = <SNIPE>;
            input-processors = <&zip_xy_scaler 1 18>;
        };

        scroll {
            layers = <SCROLL>;
            // scaler: first is multiplier, second one is divider.
            input-processors = <&zip_y_scaler 1 9999>, <&zip_xy_to_scroll_mapper>, <&zip_scroll_scaler 1 72>;
        };
    };


/*                                      42 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────────┬────────────────────────╮ ╭─────────────────────────┬─────────────────────────╮
  │  0   1   2   3   4   5 │  6   7   8   9  10  11 │ │ LT5 LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 RT5 │
  │ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │ │ LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5 │
  │ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │ │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
  ╰───────────╮ 36  37  38 │ 39  40  41 ╭───────────╯ ╰───────────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────────╯
              ╰────────────┴────────────╯                         ╰─────────────┴─────────────╯             */

    keymap {
        compatible = "zmk,keymap";

        BASE {
            label = "Base";
            bindings = <
&lt SYS ESC  &kp B             &kp F                &kp L                    &kp K                &kp Q                 &kp P           &kp G                  &kp O                        &kp U                              &kp DOT                      &backspace_or_delete
&kp TAB      &hm_left LCTRL N  &hm_left LEFT_ALT S  &hm_left LEFT_COMMAND H  &hm_left LSHFT T     &kp M                 &kp Y           &hm_right RSHFT C      &hm_right RIGHT_GUI A        &hm_right RIGHT_ALT E              &hm_right RCTRL I            &kp MINUS
&sk LSHFT    &kp X             &kp V                &kp J                    &kp D                &kp Z                 &kp APOS        &kp W                  &hm_right_layer SNIPE SLASH  &hm_right_layer SCROLL SEMICOLON   &kp COMMA                    &sk RSHFT 
                                                    &sk LEFT_COMMAND         &lt NAV R            &magic_shift          &kp ENTER       &lt DIG SPACE
            >;
        };

        Navigation {
            label = "Navigation";
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &trans    &none         &kp HOME      &kp UP    &kp END        &kt PAGE_UP    &trans
&trans  &trans  &trans  &trans  &trans                       &trans    &kp LA(LEFT)  &kp LEFT      &kp DOWN  &kp RIGHT      &kp LA(RIGHT)  &trans
&trans  &trans  &trans  &trans  &trans                       &trans    &none         &kp LA(LEFT)  &none     &kp LA(RIGHT)  &kt PAGE_DOWN  &to BASE
                        &trans  &trans                       &trans    &trans        &trans
            >;
        };

        digits {
            label = "Digits";
            bindings = <
&trans  &kp SEMICOLON          &kp N7  &kp N8  &kp N9     &kp PLUS                &more_or_equal     &kp LEFT_BRACE           &kp RIGHT_BRACE        &kp DOLLAR     &kp TILDE        &trans
&trans  &kp KP_MULTIPLY        &kp N4  &kp N5  &kp N6     &kp EQUAL               &fun_arrow_right   &kp LEFT_PARENTHESIS     &kp RIGHT_PARENTHESIS  &kp AT_SIGN    &kp EXCLAMATION  &trans
&trans  &kp PERIOD             &kp N1  &kp N2  &kp N3     &mt UNDER MINUS         &less_or_equal     &kp LEFT_BRACKET         &kp RIGHT_BRACKET      &kp AMPERSAND  &kp PIPE         &trans
                                       &trans  &kp N0     &trans                  &trans             &trans
            >;
        };

        system {
            label = "SYSTEM";
            bindings = <
&trans      &kp F1  &kp F2  &kp F3        &kp F4        &kp F5          &kp F6        &kp F7        &kp F8      &kp F9      &kp F10  &trans
&trans      &trans  &trans  &trans        &out OUT_USB  &out OUT_BLE    &kp C_MUTE    &kp C_PP      &trans      &trans      &trans   &trans
&bt BT_CLR  &trans  &trans  &out OUT_TOG  &bt BT_PRV    &bt BT_NXT      &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_NEXT  &trans   &studio_unlock
                            &trans        &trans        &trans          &trans        &trans
            >;
        };

        AUTO-MOUSE {
            label = "Mouse";
            bindings = <
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
                        &mkp LCLK  &trans  &mkp RCLK    &trans  &trans
            >;
        };

        SCROLL {
            label = "Scroll";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        SNIPE {
            label = "Snipe";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };

};

